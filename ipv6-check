#!/usr/bin/env bash

set -euo pipefail

statefile='/var/cache/ipv6-check/ipv6-check.state'
recipients='root'
host='google.de'
timeout=30
reboot=

opt=
while getopts ':s:h:r:t:p' opt; do
  case "$opt" in
    s)
      statefile="$OPTARG"
      ;;

    h)
      host="$OPTARG"
      ;;

    r)
      recipients="$OPTARG"
      ;;

    t)
      timeout="$OPTARG"
      ;;

    p)
      reboot=true
      ;;

    '?')
      printf 'Invalid option: -%s\n' "$OPTARG"

      usage=$(cat <<EOF
%s [-s STATEFILE] [-h HOST] [-r RECIPIENTS] [-t TIMEOUT] [-p]

Check IPv6 connectivity by pinging a host, and optionally send email on connectivity change.

Options:
-s\tSpecify state file, default: $statefile
-h\tSpecify host to ping, default: $host
-r\tSpace-separated list of email recipients, default: $recipients
-t\tTime in minutes to wait before sending notification after IPv6 becomes unreachable, default: $timeout
-p\tReboot machine after sending notification
EOF
)

      printf "$usage\n" "${0##*/}"
      exit 1
      ;;
  esac
done

mkdir --parents "$(dirname "$statefile")"

laststate=
timestamp=

if [[ -f "$statefile" ]]; then
  contents=($(< "$statefile"))
  laststate="${contents[0]}"
  timestamp=$((${contents[1]-0}))
fi

now=$(("$(date --utc +%s)"))

timeout() {
  [[ "$laststate" == 'down' &&
     $((now - timestamp)) -gt $((timeout * 60))
  ]]
}

notify() {
  [[ -n "$recipients" &&
     "$laststate" == '' ||
     (
       "$laststate" == 'down-notified' &&
       "$exit_status" == '0'
     ) ||
     $(timeout; echo $?) -eq 0
  ]]
}

send-email() {
  message="${1?Need message}"

  echo 'Sending notification'

  echo "$message" | \
    mail -n -S sendwait -s "IPv6 check on $(hostname)" $recipients
}

if ping -6 -c 1 "$host"; then
  exit_status=0

  if [[ "$laststate" != 'up' ]]; then
    printf 'up %s' "$now" > "$statefile"
  fi

  message=$(printf '%s is reachable since %s\n' \
                   "$host" \
                   "$(date --date=@$now)")
  echo "$message"

  if notify; then
    send-email "$message"
  fi
else
  exit_status=2

  if [[ "$laststate" != down* ]]; then
    printf 'down %s' "$now" > "$statefile"
    exit_status=1
  fi

  message=$(printf '%s is not reachable since %s\nLast state %s since %s\n' \
                   "$host" \
                   "$(date --date=@$now)" \
                   "${laststate:-unknown}" \
                   "$(date --date=@$timestamp || echo unknown)")
  >&2 echo "$message"

  if notify; then
    send-email "$message"

    [[ "$laststate" == '' ]] && ts="$now" || ts="$timestamp"
    printf 'down-notified %s' "$ts" > "$statefile"
  fi

   timeout && [[ -n "$reboot" ]] && systemctl reboot
fi

exit $exit_status
